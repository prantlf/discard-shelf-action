name: 'discard Build Output'
description: 'GitHub action for discarding the cache with the build output, where it was shelved by shelve-output-action after a release.'
author: prantlf

branding:
  icon: trash
  color: red

inputs:
  name:
    description: >-
      The name of the archive without the platform and architecture and without the `.zip` extension. The project name from `v.mod` will be used by default. The name of the archive will be `{name}-{os}-{arch}.zip`, for example: `newchanges-linux-x64.zip`.
  branches:
    description: >-
      Branches which this action should run for, which are used to publishing releases. Use spaces for separating the branch names. If you want to use multiple lines in YAML, introduce them with ">-". If you want to allow all branches, set the value to "*".
    default: main master
  enable:
    description: >-
      Can be set to `false` to prevent this action from discarding the cache. It's helpful in the pipeline, which will not continue releasing, but only building and testing, and that will be decided in the middle of a job execution.
    default: true
  include-linux:
    description: Include the archive for Linux.
    default: true
  include-macos:
    description: Include the archive for macOS.
    default: true
  include-windows:
    description: Include the archive for Windows.
    default: true

runs:
  using: 'composite'
  steps:
  - name: Setup parameters
    if: ${{ inputs.enable == 'true' }}
    id: setup
    env:
      DS_NAME: ${{ inputs.name }}
      DS_BRANCHES: ${{ inputs.branches }}
    shell: bash
    run: |
      if [[ "$DS_NAME" == "" ]]; then
        DS_NAME=$(node -e "console.log(/^.*name: *['\"]([^'\"]+)['\"].*$/mg.exec(require('fs').readFileSync('v.mod', 'utf8'))[1])")
      fi
      echo "name=$DS_NAME" >> $GITHUB_OUTPUT
      if [[ "$DS_BRANCHES" == "*" || " $DS_BRANCHES " == *" $GITHUB_REF_NAME "* ]]; then
        echo "enable=true" >> $GITHUB_OUTPUT
      fi
  - name: Check platform and architecture
    if: ${{ steps.setup.outputs.enable == 'true' && (runner.os != 'Linux' && runner.os != 'macOS' && runner.os != 'Windows' || runner.arch != 'X64') }}
    env:
      DS_PLAT: ${{ runner.os }}
      DS_ARCH: ${{ runner.arch }}
    shell: bash
    run: |
      echo "::error title=â›” Unsupported platform or architecture: $DS_PLAT-$DS_ARCH error hint::Supported are Linux, macOS, Windows on X64"
      exit 1
  - name: Delete Linux archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-linux == 'true' }}
    uses: prantlf/delete-cache-action@v2
    with:
      key: ${{ steps.setup.outputs.name }}-linux-x64.zip-${{ github.sha }}
  - name: Delete macOS archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-macos == 'true' }}
    uses: prantlf/delete-cache-action@v2
    with:
      key: ${{ steps.setup.outputs.name }}-macos-x64.zip-${{ github.sha }}
  - name: Delete Windows archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-windows == 'true' }}
    uses: prantlf/delete-cache-action@v2
    with:
      key: ${{ steps.setup.outputs.name }}-windows-x64.zip-${{ github.sha }}
